<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.0.xsd">


    <!-- 启动 @AspectJ 支持 -->
    <!--AnnotationAwareAspectJAutoProxyCreator 是一个 Bean 后处理器（BeanPostProcessor），该 Bean 后处理器将会为容器中 Bean 生成 AOP 代理，-->
    <!--当启动了 @AspectJ 支持后，只要我们在 Spring 容器中配置一个带 @Aspect 注释的 Bean，Spring 将会自动识别该 Bean，并将该 Bean 作为方面 Bean 处理。-->
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>


    <!-- 指定自动搜索 Bean 组件、自动搜索方面类 -->
    <context:component-scan base-package="com.tw.core">
        <context:include-filter type="annotation"
                                expression="org.aspectj.lang.annotation.Aspect"/>
    </context:component-scan>
    <!-- 启动 @AspectJ 支持 -->


    <!--<bean id="AuthService" class="com.tw.core.service.AuthService" scope="prototype"/>-->
    <!--<bean id="permission" class="com.tw.core.aop.loginAop.PermissionAspect" scope="prototype">-->
        <!--&lt;!&ndash;<property name="authService" ref="AuthService" />&ndash;&gt;-->
    <!--</bean>-->


    <!--<context:annotation-config/> 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、
        CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及
        equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。-->

    <!--<context:component-scan/> 的 base-package 属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。  通常与类中的@Component注解一起-->
    <!--<context:component-scan/> 配置项不但启用了对类包进行扫描以实施注释驱动 Bean 定义的功能，同时还启用了注释驱动自动注入的功能
    （即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），
    因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了。-->

    <!-- ①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <!--<context:component-scan base-package="com.tw.core.controller" />-->
    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>-->
    <!--  ③：对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"-->
          <!--p:prefix="/jsp/" p:suffix=".jsp"/>-->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/jsp/" />
        <property name="suffix" value=".jsp" />

    </bean>
    <aop:aspectj-autoproxy/>
    <!--建立对包的扫描??????????-->
    <!--<context:component-scan base-package="com.baobaotao">-->
        <!--<context:include-filter type="regex"-->
                                <!--expression="com\.baobaotao\.service\..*"/>-->
        <!--<context:exclude-filter type="aspectj"-->
                                <!--expression="com.baobaotao.util..*"/>-->
    <!--</context:component-scan>-->
    <!--??????????-->

    <!--HandlerMapping-->
    <!--BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。-->
    <!--<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>-->

    <!-- HandlerAdapter -->
    <!--SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。-->
    <!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>-->

    <!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->
    <!--当 Spring 容器启动时，AutowiredAnnotationBeanPostProcessor 将扫描 Spring 容器中所有 Bean，-->
    <!--当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。-->
    <!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->

    <!--让 JSR-250 的注释生效   @Resource、@PostConstruct 以及 @PreDestroy。-->
    <!--CommonAnnotationBeanPostProcessor 实现了 BeanPostProcessor 接口，它负责扫描使用了 JSR-250 注释的 Bean，并对它们进行相应的操作。-->
    <!--<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>-->
</beans>
